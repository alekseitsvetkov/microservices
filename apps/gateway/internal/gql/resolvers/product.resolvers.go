package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"example.com/microservices/apps/gateway/internal/gql/gqlmodel"
	"example.com/microservices/apps/gateway/internal/grpc/models"
	"github.com/google/uuid"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input gqlmodel.CreateProductInput) (bool, error) {
	req := &models.CreateProductRequest{
		Title: input.Title,
	}

	if err := r.grpc.CreateProduct(ctx, req); err != nil {
		return false, err
	}

	return true, nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id uuid.UUID, input gqlmodel.UpdateProductInput) (bool, error) {
	req := &models.UpdateProductRequest{
		Title: input.Title,
	}

	if err := r.grpc.UpdateProduct(ctx, id, req); err != nil {
		return false, err
	}

	return true, nil
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id uuid.UUID) (bool, error) {
	if err := r.grpc.DeleteProduct(ctx, id); err != nil {
		return false, err
	}

	return true, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*gqlmodel.Product, error) {
	products, err := r.grpc.GetAllProducts(ctx)
	if err != nil {
		return nil, err
	}

	var output []*gqlmodel.Product
	for _, product := range products {
		output = append(
			output,
			&gqlmodel.Product{
				ID:        uuid.MustParse(product.Id),
				Title:     product.Title,
				CreatedAt: product.CreatedAt.AsTime(),
			},
		)
	}

	return output, nil
}
