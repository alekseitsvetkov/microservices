package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/alekseytsvetkov/microservices/apps/gateway/internal/gql/gqlmodels"
	"github.com/alekseytsvetkov/microservices/libs/grpc"
	productpb "github.com/alekseytsvetkov/microservices/proto/product"
	"github.com/google/uuid"
)

func (r *mutationResolver) CreateProduct(ctx context.Context, input gqlmodels.CreateProductInput) (bool, error) {
	userID := r.middleware.GetUserIDFromCtx(ctx)

	if _, err := r.productClient.CreateProduct(
		ctx,
		&productpb.CreateProductRequest{
			UserId:      userID,
			Title:       input.Title,
			Description: input.Description,
		},
	); err != nil {
		return false, grpc.ParseError(err).Error()
	}

	return true, nil
}

func (r *mutationResolver) UpdateProduct(ctx context.Context, id uuid.UUID, input gqlmodels.UpdateProductInput) (bool, error) {
	userID := r.middleware.GetUserIDFromCtx(ctx)

	if _, err := r.productClient.UpdateProduct(
		ctx,
		&productpb.UpdateProductRequest{
			Id:          id.String(),
			UserId:      userID,
			Title:       input.Title,
			Description: input.Description,
		},
	); err != nil {
		return false, grpc.ParseError(err).Error()
	}

	return true, nil
}

func (r *mutationResolver) DeleteProduct(ctx context.Context, id uuid.UUID) (bool, error) {
	userID := r.middleware.GetUserIDFromCtx(ctx)

	if _, err := r.productClient.DeleteProduct(
		ctx,
		&productpb.DeleteProductRequest{
			Id:     id.String(),
			UserId: userID,
		},
	); err != nil {
		return false, grpc.ParseError(err).Error()
	}

	return true, nil
}

func (r *queryResolver) Products(ctx context.Context) ([]*gqlmodels.Product, error) {
	userID := r.middleware.GetUserIDFromCtx(ctx)

	res, err := r.productClient.ListProducts(
		ctx,
		&productpb.ListProductsRequest{
			UserId: userID,
		},
	)
	if err != nil {
		return nil, grpc.ParseError(err).Error()
	}

	var output []*gqlmodels.Product
	for _, product := range res.Products {
		output = append(
			output,
			&gqlmodels.Product{
				ID:          uuid.MustParse(product.Id),
				Title:       product.Title,
				Description: product.Description,
				CreatedAt:   product.CreatedAt.AsTime(),
			},
		)
	}

	return output, nil
}
